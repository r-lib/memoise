% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache_azure.R
\name{cache_azure}
\alias{cache_azure}
\title{Azure Storage Cache}
\usage{
cache_azure(cache_name, endpoint, compress = FALSE, ...)
}
\arguments{
\item{cache_name}{Name of the storage container for storing cache files.}

\item{endpoint}{The storage account endpoint for the cache. This should be an object of class \code{AzureStor::storage_endpoint}, or inheriting from it. Alternatively, you can provide the endpoint URL as a string, and pass any authentication arguments in `...`.}

\item{compress}{Argument passed to \code{saveRDS}. One of FALSE, "gzip",
"bzip2" or "xz". Default: FALSE.}

\item{...}{Further arguments that will be passed to \code{AzureStor::storage_endpoint}, if \code{endpoint} is a URL.}
}
\description{
Azure Storage backed cache, for remote caching. File, blob and ADLSgen2 storage are all supported.
}
\examples{

\dontrun{
library(AzureStor)

# use Azure blob storage for the cache
stor <- storage_endpoint("https://blob.accountname.core.windows.net", key="storage-key")
azcache <- cache_azure("cache_container", stor)
mem_runif <- memoise(runif, cache = azcache)


# you can also pass the endpoint URL and key to cache_azure:
azcache <- cache_azure("cache_container", "https://blob.accountname.core.windows.net",
                       key = "storage-key")

# a better alternative to a master key: OAuth 2.0 authentication via AAD
token <- AzureAuth::get_azure_token(
  "https://storage.azure.com",
  tenant = "mytenant",
  app = "app_id"
)
azcache <- cache_azure("cache_container", "https://blob.accountname.core.windows.net",
                       token = token)
}

}
